@page "/registroCliente"
@page "/registroCliente/{ClienteId:int}"
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer


@inject HttpClient httpClient
@inject NotificationService notificationService

<div class="container">
    <EditForm Model="clientes" OnValidSubmit="Guardar" >
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <h3>Registro de clientes</h3>
            </div>

            <div class="card-body">
                <label>Cliente Id</label>
                <div class="col-3">
                    <div class="input-group mb-3">
                        <InputNumber class="form-control" @bind-Value="ClienteId" aria-describedby="BuscarId" min="0"></InputNumber>
                        <button type="button" class="btn btn-outline-primary" @onclick="Buscar" id="BuscarId"><i class="bi bi-search"></i></button>
                    </div>
                </div>

                <div class="row">
                    <div class="col-3">
                        <label>Nombre:</label>
                        <div class="input-group mb-3">
                            <InputText class="form-control" @bind-Value="clientes.NombreCompleto" aria-describedby="NombreCliente"></InputText>
                            <ValidationMessage For="@(() => clientes.NombreCompleto)"></ValidationMessage>
                        </div>
                    </div>

                    <div class="col-3">
                        <label>Fecha de Nacimiento</label>
                        <div class="input-group mb-3">
                            <InputDate class="form-control" @bind-Value="clientes.FechaNacimiento" aria-describedby="FechaNCliente"></InputDate>
                            <ValidationMessage For="@(() => clientes.FechaNacimiento)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <fieldset class="border-success border border-1">
                    <h3>Telefonos</h3>

                    <div>
                        <div class="row">
                            <div class="col-3">
                                <label>Tipo de Telefono</label>
                                <InputSelect class="form-select" @bind-Value="TipoTelSeleccionado">
                                    <option value="0" disabled selected>[Seleccione]</option>
                                    @foreach(var tipo in L_TelefonosClientes)
                                    {
                                        <option value="@tipo.TipoTelId">@tipo.TipoTelefonos</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="col-3">
                                <label><span class="oi oi-person"></span> Nombre</label>
                                <InputText class="form-control" @bind-Value="Nombre"></InputText>
                            </div>

                            <div class="col-3">
                                <label>Telefono</label>
                                <InputText class="form-control" @oninput="ColocarGuionesAlTelefono" @bind-Value="TelIngresado"></InputText>
                            </div>


                            <div class="col">
                                <button type="button" class="btn btn-outline-primary" @onclick="AgregarDetalle"><i class="bi bi-plus">Agregar</i></button>
                            </div>

                            @if(MensajeVal.Length > 0)
                            {
                                <label class="text-danger">@MensajeVal</label>
                            }
                        </div>

                        <br />
                        <table class="table table-bordered table-light m-1">
                            <thead class="thead">
                                <tr class="table">
                                    <th>Tipo Telefono</th>
                                    <th>Nombre</th>
                                    <th>Telefono</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach(var detalle in clientes.ClientesDetalle)
                                {
                                    <tr>
                                        <td>@(TipoDescripcion(detalle.TipoTelId))</td>
                                        <td>@detalle.Nombre</td>
                                        <td>@detalle.Telefono</td>
                                        <td><button @onclick="@(() => RemoverDetalle(detalle))" class="btn btn-outline-danger"><i class="oi oi-trash">Eliminar</i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </fieldset>

                <br />

                <div class="d-flex justify-content-center">
                    <div class="btn-group">
                        <button class="btn btn-outline-primary" @onclick="Nuevo" type="button">Nuevo  <i class="bi bi-file-earmark"></i></button>
                        <button class="btn btn-outline-success" type="submit">Guardar  <i class="bi bi-file-earmark-check-fill"></i></button>
                        <button class="btn btn-outline-danger" type="button" @onclick="Eliminar">Eliminar  <i class="bi bi-trash3"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>





@code {
    [Parameter]
    public int ClienteId { get; set; }

    [SupplyParameterFromForm]
    public Clientes clientes { get; set; } = new Clientes();

    public string Nombre { get; set; } = string.Empty;

    public int TipoTelSeleccionado { get; set; }

    public IEnumerable<TelefonosClientes> L_TelefonosClientes { get; set; } = Enumerable.Empty<TelefonosClientes>();

    public string TelIngresado { get; set; } = string.Empty;

    public string MensajeVal { get; set; } = string.Empty;

    public NotificationMessage Mensaje { get; set; } = new NotificationMessage();

    protected override async Task OnInitializedAsync()
    {
        await CargarTiposTel();

        if(ClienteId > 0)
        {
            clientes.ClienteId = ClienteId;
            await Buscar();
        }
    }


    private async Task CargarTiposTel()
    {
        var tipoTelEncontrados = await httpClient.GetFromJsonAsync<IEnumerable<TelefonosClientes>>("api/TelefonosClientes");

        if(tipoTelEncontrados != null)
        {
            L_TelefonosClientes = tipoTelEncontrados;
        }
    }

    public async Task Buscar()
    {
        if (ValidarBuscar())
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al buscar",
                    Detail = "Ha ocurrido un error a la hora de buscar, verifique el Cliente Id y la fecha de nacimiento en busca de errores",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
        var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{ClienteId}");

        if(clienteEncontrado is not null)
        {
            clientes = clienteEncontrado;
            StateHasChanged();
        }
        else
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al buscar",
                    Detail = "Ha ocurrido un error a la hora de buscar un cliente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
    }

    public void Nuevo()
    {
        clientes = new Clientes();
        MensajeVal = string.Empty;

        TipoTelSeleccionado = 0;
        TelIngresado = string.Empty;

        Mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Se ha limpiado el formulario",
                Detail = "Ahora puede rellenar nuevamente el formulario",
                Duration = 5_000
            };
        notificationService.Notify(Mensaje);
        return;
    }

    public async Task Guardar()
    {

        if (Validar())
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error a la hora de guardar. Verifique el Id y/o la fecha de nacimiento",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
        using var response = await httpClient.PostAsJsonAsync<Clientes>($"api/Clientes", clientes);

        if (!response.IsSuccessStatusCode)
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al guardar",
                    Detail = "Ha ocurrido un error a la hora de guardar un cliente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }

        var clienteDevuelto = await response.Content.ReadFromJsonAsync<Clientes>();

        if(clienteDevuelto is not null)
        {
            clientes = clienteDevuelto;
            StateHasChanged();
            Nuevo();

            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al guardar",
                    Detail = "El cliente ha sido guardado exitosamente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }

    }

    public void AgregarDetalle()
    {
        if (!ValidarDetalle())
        {
            return;
        }

        clientes.ClientesDetalle.Add(new ClientesDetalle()
        {
            TipoTelId = TipoTelSeleccionado,    
            Nombre = Nombre,
            Telefono = TelIngresado
        });

        TipoTelSeleccionado = 0;
        Nombre = string.Empty;
        TelIngresado = string.Empty;
    }

    public string TipoDescripcion(int TipoTelId)
    {
        var tipoTel = L_TelefonosClientes.FirstOrDefault(c => c.TipoTelId == TipoTelId);

        return tipoTel!.TipoTelefonos;
    }

    public void RemoverDetalle(ClientesDetalle detalleRemover)
    {
        TipoTelSeleccionado = detalleRemover.TipoTelId;

        Nombre = detalleRemover.Nombre;

        TelIngresado = detalleRemover.Telefono;

        clientes.ClientesDetalle.Remove(detalleRemover);
    }

    public bool ValidarDetalle()
    {
        MensajeVal = string.Empty;

        if (String.IsNullOrWhiteSpace(Nombre))
        {
            MensajeVal += "El nombre es obligatorio.";
        }
        else if (Nombre.Length < 2)
        {
            MensajeVal += "El nombre debe tener al menos 2 caracteres.";
        }
        else if (Nombre.Any(char.IsDigit))
        {
            MensajeVal += "El nombre no puede contener números.";
        }

        if (TipoTelSeleccionado <= 0)
        {
            MensajeVal += "El Tipo de teléfono es obligatorio.";
        }

        if (String.IsNullOrWhiteSpace(TelIngresado))
        {
            MensajeVal += "El teléfono es obligatorio.";
        }
        else if (TelIngresado.Length != 12)
        {
            MensajeVal += "El teléfono debe tener exactamente 12 caracteres contando los 2 guiones.";
        }
        else if (!NumeroValido(TelIngresado))
        {
            MensajeVal += "El teléfono solo debe contener números y guiones.";
        }

        return MensajeVal.Length == 0;
    }

    private bool NumeroValido(string telefonoIngresado)
    {
        foreach (char tI in telefonoIngresado)
        {
            if (!char.IsDigit(tI) && tI != '-')
            {
                return false;
            }
        }
        return true;
    }


    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Clientes/{clientes.ClienteId}");

        if (!response.IsSuccessStatusCode)
        {
            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al eliminar",
                    Detail = "Ha ocurrido un error a la hora de eliminar un cliente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
        else
        {
            Nuevo();

            Mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exito al guardar",
                    Detail = "El cliente ha sido eliminado correctamente",
                    Duration = 5_000
                };
            notificationService.Notify(Mensaje);
            return;
        }
    }

    private void ColocarGuionesAlTelefono(ChangeEventArgs e)
    {
        var entradaTelIngresadp = e.Value.ToString();

        entradaTelIngresadp = entradaTelIngresadp.Replace("-", "");

        if (entradaTelIngresadp.Length >= 3)
        {
            entradaTelIngresadp = entradaTelIngresadp.Insert(3, "-");
        }
        if (entradaTelIngresadp.Length >= 7)
        {
            entradaTelIngresadp = entradaTelIngresadp.Insert(7, "-");
        }

        TelIngresado = entradaTelIngresadp;
    }

    public bool Validar()
    {
        return ClienteId < 0 ||
                clientes.FechaNacimiento >= DateTime.Now;
    }

    public bool ValidarBuscar()
    {
        return ClienteId <= 0 ||
                clientes.FechaNacimiento > DateTime.Now;
    }


}
