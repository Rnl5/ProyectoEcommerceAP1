@inherits LayoutComponentBase
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Identity
@using ProyectoEcommerceAP1.Data
@using Shared.Models
@inject UserManager<ApplicationUser> UserManager

<RadzenNotification />


@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="row justify-content-between">
                <AuthorizeView>
                    <div class="col-auto">
                        @if (cantidadProductosEnCarrito != null)
                        {
                            <div class="carrito-btn">
                                <a href="/carrito">
                                    <button type="button"class="btn btn-outline-primary">
                                        <i class="bi bi-cart"></i> Carrito <span class="badge bg-secondary">@cantidadProductosEnCarrito</span>
                                </button></a>
                            </div>
                        }
                    </div>
                </AuthorizeView>
@* 
                <div class="col">
                    <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                </div> *@
        </div>

            
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>



@code {
    List<ItemCarrito> detallesCarrito;
    int cantidadProductosEnCarrito;

    protected override async Task OnInitializedAsync()
    {
        await CargarDetallesCarrito();
        CalcularCantidadProductosEnCarrito();
    }

    async Task CargarDetallesCarrito()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            var usuario = await UserManager.GetUserAsync(authState.User);

            if (usuario != null)
            {
                var userId = usuario.Id;

                detallesCarrito = await httpClient.GetFromJsonAsync<List<ItemCarrito>>($"api/Carrito/Items/{userId}");
            }
            else
            {
                Console.WriteLine("La reclamacion 'sub' no esta presente en el token de autenticacion");
            }
        }
        else
        {
            Console.WriteLine("El usuario no esta autenticado");
        }
    }

    void CalcularCantidadProductosEnCarrito()
    {
        cantidadProductosEnCarrito = detallesCarrito != null ? detallesCarrito.Count : 0;
    }

}