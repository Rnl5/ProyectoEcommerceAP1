@page "/carrito"
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json
@using ProyectoEcommerceAP1.Data
@using Stripe
@using Stripe.Checkout
@using global::Shared.Models

@using Microsoft.AspNetCore.Components.Authorization


@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NotificationService notificationService
@inject NavigationManager navigationManager

@rendermode InteractiveServer

<RadzenNotification />
@if (detallesCarrito != null && detallesCarrito.Any())
{

    <div class="container">
        <h2 class="text-center">Productos en el carrito</h2>
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Imagen</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Cantidad</th>
                        <th>Valor</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in detallesCarrito)
                    {
                        <tr>
                            <td>
                                @if (!string.IsNullOrEmpty(detalle.Producto.ImagenProducto))
                                {
                                    <img src="@detalle.Producto.ImagenProducto" alt="Imagen del producto" class="img-fluid rounded" style="max-width: 100px;" />
                                }
                            </td>
                            <td>@detalle.Producto.Nombre</td>
                            <td>@detalle.Producto.Descripcion</td>
                            <td>@detalle.Cantidad</td>
                            <td>RD$ @detalle.SubTotal.ToString("N2")</td>
                            <td>
                                <button type="button" @onclick="() => RemoverItemCarrito(detalle.ItemCarritoId)" class="btn btn-danger"><i class="bi bi-trash3"></i> Eliminar</button>
                            </td>

                        </tr>
                    }
                </tbody>



                <tfoot>
                    <tr>
                        <td colspan="3" class="text-right">Total:</td>
                        <td></td>
                        <td class="text-right">RD$ @precioAPagar.ToString("N2")</td>
                    </tr>
                </tfoot>
            </table>
            <form method="post" @formname="realizarPago" @onsubmit="RealizarPago">
                    <AntiforgeryToken />
                    <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-lg btn-outline-success"><i class="bi bi-cash-stack"></i> Paga ahora</button>
                    </div>
                </form>
        </div>
    </div>
}

else
{
    <p class="text-center">No hay productos en el carrito</p>
}



@code {
    List<ItemCarrito> detallesCarrito;

    public Productos producto { get; set; }

    decimal precioAPagar;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            var usuario = await UserManager.GetUserAsync(authState.User);

            await CargarProductosEnCarrito(usuario.Id);
        }

    }

    public async Task RealizarPago()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var usuario = await UserManager.GetUserAsync(authState.User);
        var userEmail = usuario.Email;

        var domain = navigationManager.BaseUri.TrimEnd('/'); //https://localhost:12345/\


        var lineItems = detallesCarrito.Select(p => new SessionLineItemOptions
            {
                Quantity = p.Cantidad,
                PriceData = new SessionLineItemPriceDataOptions
                {
                    Currency = "DOP",
                    UnitAmountDecimal = p.Producto.PrecioOferta * 100,
                    ProductData = new SessionLineItemPriceDataProductDataOptions
                    {
                        Name = p.Producto.Nombre,
                    }
                }

            }).ToList();

        var options = new SessionCreateOptions
            {
                CustomerEmail = userEmail,
                Locale = "es",
                LineItems = lineItems,
                Mode = "payment",
                SuccessUrl = domain + "/carrito/pagoExitoso?session-id={CHECKOUT_SESSION_ID}",
                CancelUrl = domain + "/carrito",
            };

        IStripeClient stripeClient = new StripeClient(apiKey: "sk_test_51P9eJd00zH2CvkJem6ubbie3njazHtSqZxNpWKE9OuuMeirnxr8txoeFdK3Cwne5lDkZ7CDxH3sre8gsg8Dwht1X005CoJEnqE");

        var service = new SessionService(stripeClient);
        Session session = await service.CreateAsync(options);

        navigationManager.NavigateTo(session.Url);

    }

    async Task CargarProductosEnCarrito(string userId)
    {
        try
        {
            detallesCarrito = await httpClient.GetFromJsonAsync<List<ItemCarrito>>($"api/Carrito/Items/{userId}");

            if(detallesCarrito != null)
            {
                foreach(var detalle in detallesCarrito)
                {
                    var productoResponse = await httpClient.GetAsync($"api/Productos/{detalle.ProductoId}");

                    if (productoResponse.IsSuccessStatusCode)
                    {
                        var productoContent = await productoResponse.Content.ReadAsStringAsync();
                        var producto = JsonConvert.DeserializeObject<Productos>(productoContent);
                        detalle.Producto = producto;
                    }
                    else
                    {
                        return;
                    }
                }
            }
            CalcularTotalPrecioCarrito();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos en el carrito: {ex.Message}");
        }
    }

    async Task<ItemCarrito> ObtenerItemCarrito(int productoId)
    {
        var response = await httpClient.GetFromJsonAsync<ItemCarrito>($"api/Carrito/Producto/{productoId}");
        return response;
    }


    void CalcularTotalPrecioCarrito()
    {
        if (detallesCarrito != null && detallesCarrito.Any())
        {
            precioAPagar = detallesCarrito.Sum(detalle => detalle.SubTotal);
        }
        else
        {
            precioAPagar = 0;
        }
    }


    public async Task RemoverItemCarrito(int itemCarritoId)
    {
        if (itemCarritoId > 0)
        {
            try
            {
                var response = await httpClient.DeleteAsync($"api/Carrito/EliminarDetalle/{itemCarritoId}");

                if (response.IsSuccessStatusCode)
                {
                    CalcularTotalPrecioCarrito();


                    var detalleEliminado = detallesCarrito.FirstOrDefault(p => p.ItemCarritoId == itemCarritoId);
                    detallesCarrito.RemoveAll(de => de.ItemCarritoId == itemCarritoId);

                    var productoAEliminar = detalleEliminado.Producto;

                    var Mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Exito al eliminar el producto del carrito",
                            Detail = $"El {productoAEliminar.Nombre} ha sido removido del carrito exitosamente",
                            Duration = 6_000
                        };
                    notificationService.Notify(Mensaje);
                }
                else
                {
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar el producto del carrito: {ex.Message}");
            }
        }
        CalcularTotalPrecioCarrito();
    }

}