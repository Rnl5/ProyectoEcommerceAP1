@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ProyectoEcommerceAP1.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Perfil</h3>
<StatusMessage Message="@message"/>

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="row">
        <div class="col-md-6">
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>

                <div class="form-floating mb-3">
                    <InputDate @bind-Value="Input.FechaNacimiento" class="form-control" placeholder="Ingrese su fecha de nacimiento." />
                    <label for="fechaNacimiento" class="form-label">Fecha de Nacimiento</label>
                    <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger" />
                </div>
        </div>

        <div class="col-md-6">
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NombreC" class="form-control" placeholder="Ingrese su nombre." />
                <label for="nombreCliente" class="form-label">Nombre</label>
                <ValidationMessage For="() => Input.NombreC" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.ApellidoC" class="form-control" placeholder="Ingrese su apellido." />
                <label for="apellidoCliente" class="form-label">Apellido</label>
                <ValidationMessage For="() => Input.ApellidoC" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NumeroC" class="form-control" placeholder="Ingrese su numero de cedula." />
                <label for="numeroCedula" class="form-label">Numero de cedula</label>
                <ValidationMessage For="() => Input.NumeroC" class="text-danger" />
            </div>
        </div>


        <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
    </div>
</EditForm>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? nombre;
    private string? apellido;
    private DateTime? FechaN;
    private string? numCedula;

    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        nombre = user.NombreCliente;
        apellido = user.ApellidoCliente;
        FechaN = user.FechaNacimiento;
        numCedula = user.NumeroCedula;


        Input.PhoneNumber ??= phoneNumber;

        Input.NombreC ??= nombre;
        Input.ApellidoC ??= apellido;
        Input.FechaNacimiento ??= FechaN;
        Input.NumeroC ??= numCedula;
    }

    private async Task OnValidSubmitAsync()
    {

        if (Input.NombreC is null || Input.NombreC == nombre)
        {
            message = "Su nombre no ha cambiado.";
        }
        else
        {
            user.NombreCliente = Input.NombreC;

            await UserManager.UpdateAsync(user);

            message = "Su nombre ha sido actualizado correctamente.";
        }

        if (Input.ApellidoC is null || Input.ApellidoC == apellido)
        {
            message = "Su apellido no ha cambiado.";
        }
        else
        {
            user.ApellidoCliente = Input.ApellidoC;

            await UserManager.UpdateAsync(user);

            message = "Su apellido ha sido actualizado correctamente.";
        }
        if (Input.FechaNacimiento == null || Input.FechaNacimiento == FechaN)
        {
            message = "Su fecha de nacimiento no ha cambiado.";
        }
        else
        {
            user.FechaNacimiento = Input.FechaNacimiento;

            await UserManager.UpdateAsync(user);

            message = "Su fecha de nacimiento ha sido actualizada correctamente";
        }
        if (Input.NumeroC is null || Input.NumeroC == numCedula)
        {
            message = "Su numero de cedula no ha cambiado.";
        }
        else
        {
            user.NumeroCedula = Input.NumeroC;

            await UserManager.UpdateAsync(user);

            message = "Su numero de cedula ha sido actualizado correctamente";
        }
        message = "Sus datos han sido actualizados correctamente";
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [RegularExpression(@"^[^\d]+$", ErrorMessage = "El {0} no puede contener números")]
        public string? NombreC { get; set; }

        [RegularExpression(@"^[^\d]+$", ErrorMessage = "El {0} no puede contener numeros")]
        public string? ApellidoC { get; set; }

        [FechaNacimientoValida(18, 105, ErrorMessage = "La Fecha de nacimiento debe ser mayor o igual a 18 años y menor que 105 años.")]
        public DateTime? FechaNacimiento { get; set; }

        [RegularExpression(@"^\d{11}$", ErrorMessage = "El {0} debe de contener exactamente 11 digitos")]
        public string? NumeroC { get; set; }
    }
}
