@page "/Account/ConsultaUsuarios"
@using Microsoft.AspNetCore.Authorization

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProyectoEcommerceAP1.Data



@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject HttpClient httpClient


@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Roles="Admin">
    <Authorized>
         <div class="container">
            <div class="card">
                <div class="card-header">
                    <h3>Consulta de usuarios</h3>
                </div>

                <div class="card-body">
            <a href="/Account/Register"><button class="btn btn-info"><i class="bi bi-person-plus-fill">  Agregar un nuevo usuario</i></button></a>
                    <div class="row">

                        <div class="col">
                            <label>Desde</label>
                            <InputDate @bind-Value="Desde" class="form-control"></InputDate>
                        </div>

                        <div class="col">
                            <label>Hasta</label>
                            <InputDate @bind-Value="Hasta" class="form-control"></InputDate>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col">
                            <label>Campo</label>
                            <InputSelect @bind-Value="opcFiltrado" class="form-select">
                                <option value="0" disabled selected>Seleccione</option>
                                <option value="1">Busqueda por correo electronico</option>
                                <option value="2">Busqueda por Nombre</option>
                                <option value="3">Busqueda por Apellido</option>
                                <option value="4">Busqueda por N&uacute;mero de cedula</option>
                            </InputSelect>
                        </div>

                        <div class="col">
                            <label>Filtrar</label>

                            @switch (opcFiltrado)
                            {
                                case 1:
                                    <InputText class="form-control" @bind-Value ="usuario.Email"></InputText>
                                    break;
                                case 2:
                                    <InputText class="form-control" @bind-Value="usuario.NombreCliente"></InputText>
                                    break;
                                case 3:
                                    <InputText class="form-control" @bind-Value="usuario.ApellidoCliente"></InputText>
                                    break;

                                case 4:
                                    <InputText class="form-control" @bind-Value="usuario.NumeroCedula"></InputText>
                                    break;
                            }
                        </div>
                        <div class="col">
                    <button type="button" class="btn btn-outline-primary" @onclick="Buscar">Buscar  <i class="bi bi-search"></i></button>
                        </div>
                    </div>

                        <div class="col">
                            @if (usuarios != null && usuarios.Any())
                            {
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Nombre</th>
                                            <th>Apellido</th>
                                            <th>Correo electr&oacute;nico</th>
                                            <th>Fecha de nacimiento</th>
                                            <th>N&uacute;mero de cedula</th>
                                            <th></th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                @foreach (var user in usuarios)
                                        {
                                            <tr>
                                                <td>@user.NombreCliente</td>
                                                <td>@user.ApellidoCliente</td>
                                                <td>@user.Email</td>
                                                <td>@user.FechaNacimiento.ToString()</td>
                                                <td>@user.NumeroCedula</td>
                                            </tr>
                                        }
                                    </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No hay usuarios</p>
                    }
                </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="form-row justify-content-sm-between" aria-orientation="vertical">
                        <div class="col-3">
                            <label for="cantidadFilas" class="col-form-label"><strong>Num. Filas</strong>&nbsp;</label>
                            <input id="cantidadFilas" class="form-control" @bind-value="@conteo" disabled />
                        </div>
                    </div>
                </div>
            </div>
 
    </Authorized>

    <NotAuthorized>

        <h2>Usted no esta autorizado para estar aqui.

            Debe de ser admin para poder acceder a este apartado
        </h2>
    </NotAuthorized>

</AuthorizeView>


 
@code
{
    private List<ApplicationUser> usuarios { get; set; } = new List<ApplicationUser>();

    public int conteo { get; set; }

    public DateTime Desde { get; set; }

    public DateTime Hasta { get; set; }

    public int opcFiltrado { get; set; }

    [CascadingParameter]
    private HttpContext httpContext { get; set; } = default!;

    public ApplicationUser usuario { get; set; } = new ApplicationUser();


    protected override async Task OnInitializedAsync()
    {
        var usuarios2 = UserManager.Users.ToList();

        usuarios.AddRange(usuarios2);

        conteo = usuarios.Count;

        Desde = DateTime.Now.AddYears(-85);
        Hasta = DateTime.Now.AddYears(-18);
    }

    public async Task Buscar()
    {
        usuarios = UserManager.Users.ToList();

        if (Desde != default && Hasta != default)
        {
            usuarios = usuarios.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
        }

        switch (opcFiltrado)
        {
            case 1:
                if (Desde != default && Hasta != default)
                {
                    usuarios = usuarios.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(usuario.Email))
                {
                    usuarios = usuarios.Where(c => c.Email.ToLower().Contains(usuario.Email.ToLower())).ToList();
                }
                break;

            case 2:
                if (Desde != default && Hasta != default)
                {
                    usuarios = usuarios.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(usuario.NombreCliente))
                {
                    usuarios = usuarios.Where(c => c.NombreCliente.ToLower().Contains(usuario.NombreCliente.ToLower())).ToList();
                }
                break;

            case 3:
                if (Desde != default && Hasta != default)
                {
                    usuarios = usuarios.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(usuario.ApellidoCliente))
                {
                    usuarios = usuarios.Where(c => c.ApellidoCliente.ToLower().Contains(usuario.ApellidoCliente.ToLower())).ToList();
                }
                break;

            case 4:
                if (Desde != default && Hasta != default)
                {
                    usuarios = usuarios.Where(c => c.FechaNacimiento >= Desde.Date && c.FechaNacimiento <= Hasta).ToList();
                }

                if (!string.IsNullOrEmpty(usuario.NumeroCedula))
                {
                    usuarios = usuarios.Where(c => c.NumeroCedula.ToLower().Contains(usuario.NumeroCedula.ToLower())).ToList();
                }
                break;
        }

        conteo = usuarios != null ? usuarios.Count : 0;
        StateHasChanged();


    }
}
 