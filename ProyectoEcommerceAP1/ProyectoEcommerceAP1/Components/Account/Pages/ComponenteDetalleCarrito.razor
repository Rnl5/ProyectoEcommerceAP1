@page "/detalleProducto/{ProductoId}"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using ProyectoEcommerceAP1.Data
@using ProyectoEcommerceAP1
@using Microsoft.AspNetCore.Http


@using System.ComponentModel.DataAnnotations

@inject HttpClient httpClient
@inject SignInManager<ApplicationUser> SignInManager
@inject IHttpContextAccessor httpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService notificationService

@using System.Net.Http.Json
@using System.Security.Claims
@using global::Shared.Models



<RadzenNotification />
@if (producto != null)
{
    <div class="container text-center">
        <div class="card">
            <div class="media">
                <div class="img-container">
                    @if (producto.ImagenProducto != null)
                    {
                        <img src="@producto.ImagenProducto" alt="Imagen del producto" class="img-fluid" />
                    }
                </div>

                <div class="media-body">
                    <h2 class="mb-0">@(producto != null ? producto.Nombre : "Producto no encontrado")</h2>
                    <p>@producto.Descripcion</p>

                    <h4 class="price">
                        RD$ @producto.PrecioOferta.ToString("N2")
                    </h4>

                    <style>
                        .custom-input {
                            width: 70px; 
                            height: 25px;
                            font-size: 1.0rem; 
                        }
                    </style>
                    <div class="row">
                        <div class="col">
                            <div class="d-flex justify-content-center mb-3">
                                    <label for="cantidad-@producto.ProductoId" class="mr-2">Cantidad:  </label>
                                    <input type="number" class="form-control form-control-sm custom-input" id="cantidad-@producto.ProductoId" @bind-value="cantidadProducto" min="1" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex justify-content-center mb-3">
                                <button @onclick="AgregarCarrito" type="button" class="btn btn-outline-primary"><i class="bi bi-cart"></i> Agregar al carrito</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public Productos producto { get; set; }

    [Parameter]
    public string ProductoId { get; set; }

    public Carrito carrito { get; set; } = new Carrito();

    private Carrito usuarioCarrito;

    protected HttpContext httpContext => httpContextAccessor.HttpContext;

    public int cantidadProducto { get; set; }

    public NotificationMessage Mensaje { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await CargarProducto();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            carrito = await ObtenerCarritoUsuario(user.FindFirst(ClaimTypes.NameIdentifier).Value);

            if (carrito == null)
            {
                carrito = new Carrito
                    {
                        UserId = user.FindFirst(ClaimTypes.NameIdentifier).Value,
                        Items = new List<ItemCarrito>()
                    };

                var response = await httpClient.PostAsJsonAsync("api/Carrito", carrito);
                if (response.IsSuccessStatusCode)
                {
                    var carritoCreado = await response.Content.ReadFromJsonAsync<Carrito>();
                    if (carritoCreado != null)
                    {
                        carrito.CarritoId = carritoCreado.CarritoId;
                    }
                }
            }
        }
    }

    private async Task CargarProducto()
    {
        var response = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");
        if (response != null)
        {
            producto = response;
        }
    }

    public async Task<Carrito> ObtenerCarritoUsuario(string userId)
    {
        try
        {
            if (usuarioCarrito != null)
            {
                return usuarioCarrito;
            }

            var response = await httpClient.GetAsync($"api/Carrito/Usuario/{userId}");

            if (response.IsSuccessStatusCode)
            {
                var carrito = await response.Content.ReadFromJsonAsync<Carrito>();

                usuarioCarrito = carrito;

                return carrito;
            }
            else
            {
                Console.WriteLine($"La solicitud al servidor no fue exitosa. Código de estado: {response.StatusCode}");
                return null;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error al obtener el carrito del usuario: {ex.Message}");
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado al obtener el carrito del usuario: {ex.Message}");
            return null;
        }
    }


    private async Task CargarCarrito()
    {
        const int intentosMaximos = 3;
        int intentoActual = 0;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                var usuario = await UserManager.GetUserAsync(authState.User);

                if (carrito == null)
                {
                    carrito = await ObtenerCarritoUsuario(usuario.Id);

                    if (carrito == null)
                    {
                        carrito = new Carrito
                            {
                                UserId = usuario.Id,
                                Items = new List<ItemCarrito>()
                            };

                        var response = await httpClient.PostAsJsonAsync("api/Carrito", carrito);
                        if (response.IsSuccessStatusCode)
                        {
                            var carritoCreado = await response.Content.ReadFromJsonAsync<Carrito>();
                            if (carritoCreado != null)
                            {
                                carrito.CarritoId = carritoCreado.CarritoId;
                            }
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine("El usuario no se encuentra autenticado");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el carrito: {ex.Message}");

            intentoActual++;

            await Task.Delay(1000);
        }
    }


    public void AgregarCarrito()
    {
        try
        {
            if (producto != null && carrito != null)
            {
                var itemCarrito = new ItemCarrito
                            {
                                ProductoId = producto.ProductoId,
                                Producto = producto,
                                Cantidad = cantidadProducto,
                                SubTotal = producto.PrecioOferta * cantidadProducto,
                            };


                carrito.Items.Add(itemCarrito);

                if(carrito != null && producto != null)
                {
                    if(itemCarrito.Cantidad <= producto.CantidadProducto)
                    Mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Exito al agregar el producto al carrito",
                            Detail = $"El {itemCarrito.Producto.Nombre} ha sido agregado al carrito exitosamente",
                            Duration = 6_000
                        };

                    notificationService.Notify(Mensaje);
                    StateHasChanged();
                    var response = httpClient.PostAsJsonAsync($"api/Carrito/{carrito.CarritoId}/Items", itemCarrito).Result;

                    if (!response.IsSuccessStatusCode)
                    {
                        var errorMessage =  response.Content.ReadAsStringAsync().Result;
                        Console.WriteLine($"Error al agregar el producto al carrito: {response.ReasonPhrase}. Detalles: {errorMessage}");
                        return;
                    }
                    else
                    {
                        carrito =  ObtenerCarritoUsuario(carrito.UserId).Result;
                        producto.EnCarrito = true;
                        StateHasChanged();
                    }
                }      
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error de solicitud HTTP: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
    }

    private async Task<Clientes> ObtenerClienteAsync(int clienteId)
    {
        var response = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{clienteId}");

        return response;
    }
}